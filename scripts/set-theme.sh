#!/bin/sh

set -e

# --- Helper Functions ---
sed_i() {
  sed -i.bak "$@"
}

# --- Script Setup ---
if [ -z "$1" ]; then
  echo "Usage: $0 <theme_name>"
  echo "Available themes: dark, light"
  exit 1
fi

THEME_NAME=$1
SCRIPT_DIR=$(cd -- "$(dirname -- "$0")" && pwd)
THEME_FILE="$SCRIPT_DIR/themes/${THEME_NAME}.sh"
DOTFILES_DIR=$(dirname "$SCRIPT_DIR")

if [ ! -f "$THEME_FILE" ]; then
  echo "Error: Theme '$THEME_NAME' not found."
  echo "Available themes: dark, light"
  exit 1
fi

. "$THEME_FILE"

# --- Ghostty ---
echo "Updating Ghostty theme..."
GHOSTTY_CONFIG="$DOTFILES_DIR/ghostty/config"
if [ -f "$GHOSTTY_CONFIG" ]; then
  sed_i "s/^background = .*/background = $THEME_BG_HEX/" "$GHOSTTY_CONFIG"
  sed_i "s/^foreground = .*/foreground = $THEME_FG_HEX/" "$GHOSTTY_CONFIG"
  sed_i "s/^selection-background = .*/selection-background = $THEME_HIGHLIGHT_HEX/" "$GHOSTTY_CONFIG"
  if [ -n "$THEME_HIGHLIGHT_FG_HEX" ]; then
    sed_i "s/^selection-foreground = .*/selection-foreground = $THEME_HIGHLIGHT_FG_HEX/" "$GHOSTTY_CONFIG"
  else
    sed_i "s/^selection-foreground = .*/selection-foreground = $THEME_FG_HEX/" "$GHOSTTY_CONFIG"
  fi
  if [ "$THEME_NAME" = "light" ]; then
    sed_i "s/^cursor-color = .*/cursor-color = 7c7f93/" "$GHOSTTY_CONFIG"
    sed_i "s/^cursor-text = .*/cursor-text = eff1f5/" "$GHOSTTY_CONFIG"
  else # dark theme
    sed_i "s/^cursor-color = .*/cursor-color = a6adc8/" "$GHOSTTY_CONFIG"
    sed_i "s/^cursor-text = .*/cursor-text = 0d0b14/" "$GHOSTTY_CONFIG"
  fi
fi

# --- Starship ---
echo "Updating Starship theme..."
STARSHIP_CONFIG="$DOTFILES_DIR/starship/starship.toml"

if [ -f "$STARSHIP_CONFIG" ]; then
  # Ensure the light palette exists
  if ! grep -q "\[palettes.light_latte\]" "$STARSHIP_CONFIG"; then
    cat << 'EOF' >> "$STARSHIP_CONFIG"

[palettes.light_latte]
background = "#eff1f5"
highlight = "#e6e9ef"
text = "#4c4f69"
purple = "#8839ef"
green = "#40a02b"
blue = "#1e66f5"
yellow = "#df8e1d"
red = "#d20f39"
cyan = "#04a5e5"
pink = "#ea76cb"
orange = "#fe640b"
surface = "#bcc0cc"
gray = "#9ca0b0"
EOF
  fi

  # Set the active palette
  if [ "$THEME_NAME" = "dark" ]; then
    sed_i "s/^palette = .*/palette = 'dark_purple'/" "$STARSHIP_CONFIG"
  else
    sed_i "s/^palette = .*/palette = 'light_latte'/" "$STARSHIP_CONFIG"
  fi
fi

# --- Tmux ---
echo "Updating Tmux theme..."
TMUX_THEME_CONFIG="$DOTFILES_DIR/tmux/theme.conf"
cat << EOF > "$TMUX_THEME_CONFIG"
# This file is managed by the set-theme.sh script.
# Do not edit this file directly.

thm_bg="$THEME_BG_TMUX"
thm_fg="$THEME_FG_TMUX"
thm_gray="$THEME_GRAY_TMUX"
thm_blue="$THEME_BLUE_TMUX"
thm_green="$THEME_GREEN_TMUX"
thm_pink="$THEME_PINK_TMUX"
thm_purple="$THEME_PURPLE_TMUX"
thm_red="$THEME_RED_TMUX"
thm_yellow="$THEME_YELLOW_TMUX"
thm_orange="$THEME_ORANGE_TMUX"
thm_cyan="$THEME_CYAN_TMUX"
thm_black="$THEME_BLACK_TMUX"
thm_surface="$THEME_SURFACE_TMUX"
thm_highlight="$THEME_HIGHLIGHT_TMUX"
thm_highlight_fg="${THEME_HIGHLIGHT_FG_HEX/#/#}"

l_round=""
r_round=""

set -g status on
set -g status-bg "\$thm_bg"
set -g status-fg "\$thm_fg"
set -g status-justify left
set -g status-left-length 100
set -g status-right-length 100

setw -g window-status-activity-style "fg=\$thm_fg,bg=\$thm_bg,none"
setw -g window-status-separator ""
setw -g window-status-style "fg=\$thm_surface,bg=\$thm_bg,none"

setw -g window-status-format "#[fg=\$thm_surface,bg=\$thm_bg] #I:#W  "
setw -g window-status-current-format "#[fg=\$thm_purple,bg=\$thm_bg]\${l_round}#[fg=\$thm_bg,bg=\$thm_purple,bold] #I:#W #[fg=\$thm_purple,bg=\$thm_bg]\${r_round} "

set -g status-left "#[fg=\$thm_green,bg=\$thm_bg]\${l_round}#[fg=\$thm_bg,bg=\$thm_green,bold] #S #[fg=\$thm_green,bg=\$thm_bg]\${r_round} "
set -g status-right "#[fg=\$thm_blue,bg=\$thm_bg]\${l_round}#[fg=\$thm_bg,bg=\$thm_blue] #{b:pane_current_path} #[fg=\$thm_blue,bg=\$thm_bg]\${r_round} #[fg=\$thm_red,bg=\$thm_bg]\${l_round}#[fg=\$thm_bg,bg=\$thm_red] #{pane_current_command} #[fg=\$thm_red,bg=\$thm_bg]\${r_round} "

set -g message-style "fg=\$thm_cyan,bg=\$thm_gray,align=centre"
set -g message-command-style "fg=\$thm_cyan,bg=\$thm_gray,align=centre"

# Pane borders
set -g pane-border-style "fg=\$thm_highlight"
set -g pane-active-border-style "fg=\$thm_purple"

# Modes
set -g mode-style "fg=\$thm_highlight_fg,bg=\$thm_highlight"
setw -g mode-style "fg=\$thm_highlight_fg,bg=\$thm_highlight"

# Clock
set -g clock-mode-colour "\$thm_blue"
EOF

# --- Neovim ---
echo "Updating Neovim theme..."
NVIM_THEME_CONFIG="$DOTFILES_DIR/nvim/lua/custom/theme.lua"
if [ "$THEME_NAME" = "dark" ]; then
  # Generate Neovim theme file for dark theme
  cat << EOF > "$NVIM_THEME_CONFIG"
-- This file is managed by the set-theme.sh script.
vim.g.catppuccin_flavour = "mocha"
vim.g.catppuccin_custom_highlights = {
    Normal = { bg = "#$THEME_BG_HEX" },
    NormalFloat = { bg = "#$THEME_BG_HEX" },
    NormalNC = { bg = "#$THEME_BG_HEX" },
    CursorLine = { bg = "#$THEME_HIGHLIGHT_HEX" },
    Visual = { bg = "#$THEME_HIGHLIGHT_HEX", fg = "#$THEME_HIGHLIGHT_FG_HEX" },
    SignColumn = { bg = "#$THEME_BG_HEX" },
    LineNr = { bg = "#$THEME_BG_HEX" },
    LineNrAbove = { bg = "#$THEME_BG_HEX" },
    LineNrBelow = { bg = "#$THEME_BG_HEX" },
    CursorLineNr = { bg = "#$THEME_HIGHLIGHT_HEX" },
    Terminal = { bg = "#$THEME_BG_HEX" },
    StatusLine = { bg = "#$THEME_HIGHLIGHT_HEX" },
    StatusLineNC = { bg = "#$THEME_BG_HEX" },
    TabLine = { bg = "#$THEME_BG_HEX" },
    TabLineFill = { bg = "#$THEME_BG_HEX" },
    TabLineSel = { bg = "#$THEME_HIGHLIGHT_HEX" },
    NeoTreeNormal = { bg = "#$THEME_BG_HEX" },
    NeoTreeNormalNC = { bg = "#$THEME_BG_HEX" },
    NeoTreeEndOfBuffer = { bg = "#$THEME_BG_HEX" },
    NeoTreeWinSeparator = { bg = "#$THEME_BG_HEX", fg = "#$THEME_HIGHLIGHT_HEX" },
    TelescopeNormal = { bg = "#$THEME_BG_HEX" },
    TelescopeBorder = { bg = "#$THEME_BG_HEX", fg = "#$THEME_HIGHLIGHT_HEX" },
    TelescopePromptNormal = { bg = "#$THEME_HIGHLIGHT_HEX" },
    TelescopePromptBorder = { bg = "#$THEME_HIGHLIGHT_HEX", fg = "#$THEME_HIGHLIGHT_HEX" },
    TelescopePromptTitle = { bg = "#$THEME_HIGHLIGHT_HEX" },
    TelescopePreviewTitle = { bg = "#$THEME_BG_HEX" },
    TelescopeResultsTitle = { bg = "#$THEME_BG_HEX" },
    FloatBorder = { bg = "#$THEME_BG_HEX", fg = "#$THEME_HIGHLIGHT_HEX" },
    FloatTitle = { bg = "#$THEME_BG_HEX" },
    Pmenu = { bg = "#$THEME_BG_HEX" },
    PmenuSel = { bg = "#$THEME_HIGHLIGHT_HEX" },
    PmenuSbar = { bg = "#$THEME_BG_HEX" },
    PmenuThumb = { bg = "#$THEME_HIGHLIGHT_HEX" },
    WinSeparator = { bg = "#$THEME_BG_HEX", fg = "#$THEME_HIGHLIGHT_HEX" },
    VertSplit = { bg = "#$THEME_BG_HEX", fg = "#$THEME_HIGHLIGHT_HEX" },
    Folded = { bg = "#$THEME_HIGHLIGHT_HEX" },
    FoldColumn = { bg = "#$THEME_BG_HEX" },
    EndOfBuffer = { bg = "#$THEME_BG_HEX" },
    WhichKey = { bg = "#$THEME_BG_HEX" },
    WhichKeyFloat = { bg = "#$THEME_BG_HEX" },
    DiagnosticSignError = { bg = "#$THEME_BG_HEX" },
    DiagnosticSignWarn = { bg = "#$THEME_BG_HEX" },
    DiagnosticSignInfo = { bg = "#$THEME_BG_HEX" },
    DiagnosticSignHint = { bg = "#$THEME_BG_HEX" },
    GitSignsAdd = { bg = "#$THEME_BG_HEX" },
    GitSignsChange = { bg = "#$THEME_BG_HEX" },
    GitSignsDelete = { bg = "#$THEME_BG_HEX" },
}
EOF
elif [ "$THEME_NAME" = "light" ]; then
  # Generate Neovim theme file for light theme
  cat << EOF > "$NVIM_THEME_CONFIG"
-- This file is managed by the set-theme.sh script.
vim.g.catppuccin_flavour = "latte"
vim.g.catppuccin_integrations = {
  treesitter = {
    overrides = {
      ["@comment"] = { fg = "#5c6370", style = "italic" },
      ["@keyword"] = { fg = "#5d319e" },
      ["@function"] = { fg = "#003366" },
      ["@string"] = { fg = "#005000" },
      ["@number"] = { fg = "#995400" },
      ["@constant.builtin"] = { fg = "#995400" },
      ["@type.builtin"] = { fg = "#995400" },
      ["@type"] = { fg = "#995400" },
      ["@tag"] = { fg = "#990000" },
      ["@operator"] = { fg = "#5d319e" },
      ["@conditional"] = { fg = "#5d319e" },
      ["@repeat"] = { fg = "#5d319e" },
    },
  },
}
vim.g.catppuccin_custom_highlights = {
  Normal = { bg = "#$THEME_BG_HEX", fg = "#$THEME_FG_HEX" },
  NormalFloat = { bg = "#e6e9ef" },
  NormalNC = { bg = "#eff1f5" },
  CursorLine = { bg = "#$THEME_HIGHLIGHT_HEX", fg = "#$THEME_HIGHLIGHT_FG_HEX" },
  Visual = { bg = "#$THEME_HIGHLIGHT_HEX", fg = "#$THEME_HIGHLIGHT_FG_HEX" },
  SignColumn = { bg = "#eff1f5" },
  LineNr = { bg = "#eff1f5" },
  LineNrAbove = { bg = "#eff1f5" },
  LineNrBelow = { bg = "#eff1f5" },
  CursorLineNr = { bg = "#$THEME_HIGHLIGHT_HEX", fg = "#$THEME_HIGHLIGHT_FG_HEX" },
  Terminal = { bg = "#eff1f5" },
  StatusLine = { bg = "#e6e9ef" },
  StatusLineNC = { bg = "#dce0e8" },
  TabLine = { bg = "#eff1f5" },
  TabLineFill = { bg = "#dce0e8" },
  TabLineSel = { bg = "#$THEME_HIGHLIGHT_HEX", fg = "#$THEME_HIGHLIGHT_FG_HEX" },
  NeoTreeNormal = { bg = "#eff1f5" },
  NeoTreeNormalNC = { bg = "#eff1f5" },
  NeoTreeEndOfBuffer = { bg = "#eff1f5" },
  NeoTreeWinSeparator = { bg = "#eff1f5", fg = "#ccd0da" },
  TelescopeNormal = { bg = "#eff1f5" },
  TelescopeBorder = { bg = "#e6e9ef", fg = "#bcc0cc" },
  TelescopePromptNormal = { bg = "#ccd0da" },
  TelescopePromptBorder = { bg = "#ccd0da", fg = "#ccd0da" },
  TelescopePromptTitle = { bg = "#ccd0da" },
  TelescopePreviewTitle = { bg = "#eff1f5" },
  TelescopeResultsTitle = { bg = "#eff1f5" },
  FloatBorder = { bg = "#e6e9ef", fg = "#bcc0cc" },
  FloatTitle = { bg = "#eff1f5" },
  Pmenu = { bg = "#e6e9ef" },
  PmenuSel = { bg = "#$THEME_HIGHLIGHT_HEX", fg = "#$THEME_HIGHLIGHT_FG_HEX" },
  PmenuSbar = { bg = "#e6e9ef" },
  PmenuThumb = { bg = "#ccd0da" },
  WinSeparator = { bg = "#eff1f5", fg = "#ccd0da" },
  VertSplit = { bg = "#eff1f5", fg = "#ccd0da" },
}
EOF
fi

echo ""
echo "Theme set to '$THEME_NAME' successfully!"
echo "Please restart Ghostty, and reload Tmux (prefix + r) and Neovim for changes to take full effect."

# --- Automatic Reloading ---

# Reload Ghostty configuration on macOS
if [ "$(uname)" = "Darwin" ]; then
  echo "Attempting to reload Ghostty configuration..."
  osascript >/dev/null 2>&1 <<'EOF'
    tell application "Ghostty"
      activate
      delay 0.2
      tell application "System Events" to keystroke "," using {command down, shift down}
    end tell
EOF
fi

# Reload Tmux configuration if the server is running
if tmux info &> /dev/null; then
  echo "Reloading Tmux configuration..."
  tmux source-file ~/.config/tmux/tmux.conf
fi

echo "Reload commands sent."
